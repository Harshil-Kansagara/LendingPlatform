// <auto-generated />
using System;
using LendingPlatform.DomainModel.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LendingPlatform.DomainModel.Migrations
{
    [DbContext(typeof(LendingPlatformContext))]
    [Migration("20210517073016_19_Remove_Unique_CIN_Company_Table")]
    partial class _19_Remove_Unique_CIN_Company_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.BankUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BankUser");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.AdditionalDocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentTypeFor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdditionalDocumentType");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IntegratedServiceConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimaryNumber")
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("SecondaryDesignator")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryNumber")
                        .HasColumnType("text");

                    b.Property<string>("StateAbbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetSuffix")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IntegratedServiceConfigurationId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("AuditJson")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByBankUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("LogBlockName")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LogBlockNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<Guid>("TablePk")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByBankUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.BankAccountTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountInformationJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProviderBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionInformationJson")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProviderBankId");

                    b.ToTable("BankAccountTransaction");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.BusinessAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Age")
                        .IsUnique();

                    b.HasIndex("Order")
                        .IsUnique();

                    b.ToTable("BusinessAge");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessAgeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyFiscalYearStartMonth")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyRegisteredState")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanySizeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyStructureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IndustryExperienceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NAICSIndustryTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAgeId");

                    b.HasIndex("CompanySizeId");

                    b.HasIndex("CompanyStructureId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IndustryExperienceId");

                    b.HasIndex("NAICSIndustryTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.CompanySize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Order")
                        .IsUnique();

                    b.HasIndex("Size")
                        .IsUnique();

                    b.ToTable("CompanySize");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.CompanyStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Order")
                        .IsUnique();

                    b.HasIndex("Structure")
                        .IsUnique();

                    b.ToTable("CompanyStructure");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.CreditReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CommercialScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("FsrScore")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasPendingJudgment")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPendingLien")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IntegratedServiceConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBankrupted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SurrogateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<Guid?>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("EntityId");

                    b.HasIndex("IntegratedServiceConfigurationId");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("Version");

                    b.ToTable("CreditReport");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityAdditionalDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionalDocumentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SurrogateId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalDocumentTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EntityId");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EntityAdditionalDocument");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("FinancialInformationJson")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("FinancialStatementId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IntegratedServiceConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDataEmpty")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SurrogateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ThirdPartyWiseCompanyName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("EntityId");

                    b.HasIndex("FinancialStatementId");

                    b.HasIndex("IntegratedServiceConfigurationId");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Version");

                    b.ToTable("EntityFinance");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinanceStandardAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("EntityFinancialYearlyMappingId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ExpectedValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceJson")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("EntityFinancialYearlyMappingId");

                    b.ToTable("EntityFinanceStandardAccount");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinanceYearlyMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityFinanceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastAddedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UploadedDocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityFinanceId");

                    b.HasIndex("UploadedDocumentId");

                    b.ToTable("EntityFinanceYearlyMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityLoanApplicationConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsenteeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsConsentGiven")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("ConsenteeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EntityLoanApplicationConsent");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityLoanApplicationMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("LoanApplicationId");

                    b.ToTable("EntityLoanApplicationMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityRelationshipMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelativeEntityId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("SharePercentage")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryEntityId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("RelativeEntityId");

                    b.ToTable("EntityRelationshipMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityTaxForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SurrogateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<Guid>("TaxFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("EntityId");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("TaxFormId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Version");

                    b.ToTable("EntityTaxForm");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityTaxYearlyMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityTaxFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EntityTaxFormId");

                    b.ToTable("EntityTaxYearlyMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.FinancialStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAutoCalculated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FinancialStatement");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.IndustryExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Experience")
                        .IsUnique();

                    b.HasIndex("Order")
                        .IsUnique();

                    b.ToTable("IndustryExperience");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.NAICSIndustryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IndustryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IndustryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NAICSParentSectorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NAICSParentSectorId");

                    b.ToTable("NAICSIndustryType");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.OCRModelMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyStructureId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyStructureId");

                    b.ToTable("OCRModelMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PersonalFinanceAccount");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonalFinanceAttribute");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttributeCategoryMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentAttributeCategoryMappingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PersonalFinanceConstantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentAttributeCategoryMappingId");

                    b.HasIndex("PersonalFinanceConstantId");

                    b.ToTable("AttributeCategoryMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonalFinanceAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonalFinanceAccountId");

                    b.ToTable("PersonalFinanceCategory");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceConstant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonalFinanceConstant");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceParentChildCategoryMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentAttributeCategoryMappingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChildCategoryId");

                    b.HasIndex("ParentAttributeCategoryMappingId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ParentChildCategoryMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EntityFinanceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonalFinanceAttributeCategoryMappingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityFinanceId");

                    b.HasIndex("PersonalFinanceAttributeCategoryMappingId");

                    b.ToTable("PersonalFinanceResponse");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.ProviderBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankInformationJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Entityd")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IntegratedServiceConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Entityd");

                    b.HasIndex("IntegratedServiceConfigurationId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ProviderBank");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Relation")
                        .IsUnique();

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaxForm");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormCompanyStructureMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyStructureId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSoleProprietors")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaxFormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyStructureId");

                    b.HasIndex("TaxFormId");

                    b.ToTable("TaxFormCompanyStructureMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormLabelNameMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LabelFieldName")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaxFormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaxFormId");

                    b.ToTable("TaxFormLabelNameMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormValueLabelMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<string>("CorrectedValue")
                        .HasColumnType("text");

                    b.Property<Guid>("EntityTaxYearlyMappingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaxformLabelNameMappingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityTaxYearlyMappingId");

                    b.HasIndex("TaxformLabelNameMappingId");

                    b.ToTable("TaxFormValueLabelMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("HasAnyJudgementsSelfDeclared")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBankruptcySelfDeclared")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int?>("ResidencyStatus")
                        .HasColumnType("integer");

                    b.Property<string>("SSN")
                        .HasColumnType("text");

                    b.Property<string>("SelfDeclaredCreditScore")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.IntegratedServiceConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsServiceEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IntegratedServiceConfiguration");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SWIFTCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SWIFTCode")
                        .IsUnique();

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConsentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Consent");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.DescriptionPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("DescriptionPoint");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.EntityBankDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EntityBankDetail");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EMIDeducteeBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationComments")
                        .HasColumnType("text");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LoanAmountDepositeeBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoanApplicationNumber")
                        .IsRequired()
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<decimal>("LoanPeriod")
                        .HasColumnType("numeric");

                    b.Property<Guid>("LoanPurposeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubLoanPurposeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByBankUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EMIDeducteeBankId");

                    b.HasIndex("LoanAmountDepositeeBankId");

                    b.HasIndex("LoanApplicationNumber")
                        .IsUnique();

                    b.HasIndex("LoanPurposeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubLoanPurposeId");

                    b.HasIndex("UpdatedByBankUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LoanApplication");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplicationSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationDetailsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LoanApplicationId");

                    b.ToTable("LoanApplicationSnapshot");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LoanTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Order")
                        .IsUnique();

                    b.ToTable("LoanPurpose");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurposeRangeTypeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoanPurposeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoanRangeTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Minimum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StepperAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LoanPurposeId");

                    b.HasIndex("LoanRangeTypeId");

                    b.ToTable("LoanPurposeRangeTypeMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanRangeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LoanRangeType");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LoanType");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ProductEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ProductStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.ProductRangeTypeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Minimum")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RangeTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RangeTypeId");

                    b.ToTable("ProductRangeTypeMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.ProductSubPurposeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubLoanPurposeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubLoanPurposeId");

                    b.ToTable("ProductSubPurposeMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.ProductTypeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoanTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTypeMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Order")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ParentSectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentSectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.SubLoanPurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LoanPurposeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoanPurposeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubLoanPurpose");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.UserLoanSectionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoanApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoanSectionMapping");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Address", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.IntegratedServiceConfiguration", "IntegratedServiceConfiguration")
                        .WithMany()
                        .HasForeignKey("IntegratedServiceConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.AuditLog", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.BankUser", "CreatedByBankUser")
                        .WithMany()
                        .HasForeignKey("CreatedByBankUserId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.BankAccountTransaction", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.ProviderBank", "ProviderBank")
                        .WithMany("BankAccountTransactions")
                        .HasForeignKey("ProviderBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Company", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.BusinessAge", "BusinessAge")
                        .WithMany()
                        .HasForeignKey("BusinessAgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.CompanySize", "CompanySize")
                        .WithMany()
                        .HasForeignKey("CompanySizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.CompanyStructure", "CompanyStructure")
                        .WithMany()
                        .HasForeignKey("CompanyStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithOne("Company")
                        .HasForeignKey("LendingPlatform.DomainModel.Models.EntityInfo.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.IndustryExperience", "IndustryExperience")
                        .WithMany()
                        .HasForeignKey("IndustryExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.NAICSIndustryType", "NAICSIndustryType")
                        .WithMany()
                        .HasForeignKey("NAICSIndustryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.CreditReport", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany("CreditReports")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.IntegratedServiceConfiguration", "IntegratedServiceConfiguration")
                        .WithMany()
                        .HasForeignKey("IntegratedServiceConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany("CreditReports")
                        .HasForeignKey("LoanApplicationId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.Entity", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityAdditionalDocument", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.AdditionalDocumentType", "AdditionalDocumentType")
                        .WithMany()
                        .HasForeignKey("AdditionalDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany("AdditionalDocuments")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany("AdditionalDocuments")
                        .HasForeignKey("LoanApplicationId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinance", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany("EntityFinances")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.FinancialStatement", "FinancialStatement")
                        .WithMany()
                        .HasForeignKey("FinancialStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.IntegratedServiceConfiguration", "IntegratedServiceConfiguration")
                        .WithMany()
                        .HasForeignKey("IntegratedServiceConfigurationId");

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany("EntityFinances")
                        .HasForeignKey("LoanApplicationId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinanceStandardAccount", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinanceYearlyMapping", "EntityFinanceYearlyMapping")
                        .WithMany("EntityFinanceStandardAccounts")
                        .HasForeignKey("EntityFinancialYearlyMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinanceYearlyMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinance", "EntityFinance")
                        .WithMany("EntityFinanceYearlyMappings")
                        .HasForeignKey("EntityFinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Document", "UploadedFinancialDocument")
                        .WithMany()
                        .HasForeignKey("UploadedDocumentId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityLoanApplicationConsent", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Consent", "Consent")
                        .WithMany()
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany("EntityConsents")
                        .HasForeignKey("ConsenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityLoanApplicationMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany("EntityLoanApplicationMappings")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityRelationshipMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "PrimaryEntity")
                        .WithMany("PrimaryEntityRelationships")
                        .HasForeignKey("PrimaryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "RelativeEntity")
                        .WithMany("RelativeEntityRelationships")
                        .HasForeignKey("RelativeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityTaxForm", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany("EntityTaxForms")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany("EntityTaxForms")
                        .HasForeignKey("LoanApplicationId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.TaxForm", "TaxForm")
                        .WithMany()
                        .HasForeignKey("TaxFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.EntityTaxYearlyMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Document", "UploadedDocument")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.EntityTaxForm", "EntityTaxForm")
                        .WithMany("EntityTaxYearlyMappings")
                        .HasForeignKey("EntityTaxFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.NAICSIndustryType", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.NAICSIndustryType", "NAICSParentSector")
                        .WithMany()
                        .HasForeignKey("NAICSParentSectorId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.OCRModelMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.CompanyStructure", "CompanyStructure")
                        .WithMany()
                        .HasForeignKey("CompanyStructureId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttributeCategoryMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceCategory", "Category")
                        .WithMany("PersonalFinanceAttributeCategoryMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttributeCategoryMapping", "ParentAttributeCategoryMapping")
                        .WithMany("ChildAttributeCategoryMappings")
                        .HasForeignKey("ParentAttributeCategoryMappingId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceConstant", "PersonalFinanceConstant")
                        .WithMany()
                        .HasForeignKey("PersonalFinanceConstantId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceCategory", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAccount", "PersonalFinanceAccount")
                        .WithMany("PersonalFinanceCategories")
                        .HasForeignKey("PersonalFinanceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceParentChildCategoryMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceCategory", "ChildCategory")
                        .WithMany("MappedAsChildCategoryMappings")
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttributeCategoryMapping", "ParentAttributeCategoryMapping")
                        .WithMany("ParentChildCategoryMappings")
                        .HasForeignKey("ParentAttributeCategoryMappingId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceCategory", "ParentCategory")
                        .WithMany("MappedAsParentCategoryMappings")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceResponse", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.EntityFinance", "EntityFinance")
                        .WithMany("PersonalFinanceResponses")
                        .HasForeignKey("EntityFinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.PersonalFinanceAttributeCategoryMapping", "PersonalFinanceAttributeCategoryMapping")
                        .WithMany("PersonalFinanceResponses")
                        .HasForeignKey("PersonalFinanceAttributeCategoryMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.ProviderBank", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithMany("ProviderBanks")
                        .HasForeignKey("Entityd");

                    b.HasOne("LendingPlatform.DomainModel.Models.IntegratedServiceConfiguration", "IntegratedServiceConfiguration")
                        .WithMany()
                        .HasForeignKey("IntegratedServiceConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormCompanyStructureMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.CompanyStructure", "CompanyStructure")
                        .WithMany()
                        .HasForeignKey("CompanyStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.TaxForm", "TaxForm")
                        .WithMany()
                        .HasForeignKey("TaxFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormLabelNameMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.TaxForm", "TaxForm")
                        .WithMany()
                        .HasForeignKey("TaxFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormValueLabelMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.EntityTaxYearlyMapping", "EntityTaxYearlyMapping")
                        .WithMany("TaxFormValueLabelMappings")
                        .HasForeignKey("EntityTaxYearlyMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.TaxFormLabelNameMapping", "TaxformLabelNameMapping")
                        .WithMany()
                        .HasForeignKey("TaxformLabelNameMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.EntityInfo.User", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.Entity", "Entity")
                        .WithOne("User")
                        .HasForeignKey("LendingPlatform.DomainModel.Models.EntityInfo.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.DescriptionPoint", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Product", "Product")
                        .WithMany("DescriptionPoints")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.EntityBankDetail", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.EntityBankDetail", "EMIDeducteeBank")
                        .WithMany()
                        .HasForeignKey("EMIDeducteeBankId");

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.EntityBankDetail", "LoanAmountDepositeeBank")
                        .WithMany()
                        .HasForeignKey("LoanAmountDepositeeBankId");

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurpose", "LoanPurpose")
                        .WithMany()
                        .HasForeignKey("LoanPurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.SubLoanPurpose", "SubLoanPurpose")
                        .WithMany()
                        .HasForeignKey("SubLoanPurposeId");

                    b.HasOne("LendingPlatform.DomainModel.Models.BankUser", "UpdatedByBankUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByBankUserId");

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplicationSnapshot", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurpose", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanType", "LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurposeRangeTypeMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurpose", "LoanPurpose")
                        .WithMany("LoanPurposeRangeTypeMappings")
                        .HasForeignKey("LoanPurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanRangeType", "LoanRangeType")
                        .WithMany()
                        .HasForeignKey("LoanRangeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.ProductRangeTypeMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanRangeType", "LoanRangeType")
                        .WithMany()
                        .HasForeignKey("RangeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.ProductSubPurposeMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.SubLoanPurpose", "SubLoanPurpose")
                        .WithMany()
                        .HasForeignKey("SubLoanPurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.ProductTypeMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanType", "LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Section", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Section", "ParentSection")
                        .WithMany()
                        .HasForeignKey("ParentSectionId");
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.SubLoanPurpose", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanPurpose", "LoanPurpose")
                        .WithMany("SubLoanPurposes")
                        .HasForeignKey("LoanPurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendingPlatform.DomainModel.Models.LoanApplicationInfo.UserLoanSectionMapping", b =>
                {
                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.LoanApplication", "LoanApplication")
                        .WithMany("UserLoanSectionMappings")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.LoanApplicationInfo.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendingPlatform.DomainModel.Models.EntityInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
